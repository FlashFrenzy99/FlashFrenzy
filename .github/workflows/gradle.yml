# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]


permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    # ap application-secret.yml 생성
    - name: make application-secret.yml
      run: |
        cd ./src/main/resources
        # touch ./application-secret.yml
        echo "${{ secrets.APPLICATION_PROD }}" > ./application-secret.yml 
    # gradlew 실행 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    # gradle 빌드
    - name: Build with Gradle
      run: ./gradlew build -x test
    # docker 이미지 빌드
    - name: Docker build
      run: |
        sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        sudo docker build -t app .
        sudo docker tag app ${{ secrets.DOCKER_USERNAME }}/ff:latest
        sudo docker push ${{ secrets.DOCKER_USERNAME }}/ff:latest
    # 디렉토리 생성
    - name: Make Directory
      run: mkdir -p deploy
    # appspec.yml 파일 복사
    - name: Copy appspec.yml
      run: cp appspec.yml ./deploy
    # script files 복사
    - name: make script
      run: |
        mkdir scripts
        touch scripts/deploy.sh
        echo "sudo docker pull ${{ secrets.DOCKER_USERNAME }}/ff:latest" >> scripts/deploy.sh
        echo "sudo docker stop $(sudo docker ps -a -q)" >> scripts/deploy.sh
        echo "sudo docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/ff:latest" >> scripts/deploy.sh
        echo "sudo docker rm $(sudo docker ps --filter 'status=exited' -a -q)" >> scripts/deploy.sh
        echo "sudo docker image prune -a -f" >> scripts/deploy.sh
        cp ./scripts/*.sh ./deploy
    # deploy 폴더 파일 zip 압축
    - name: Make zip file
      run: zip -r ./flashfrenzy.zip ./deploy
      shell: bash
    # IAM 인증
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    # S3로 zip파일 보내기
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./flashfrenzy.zip s3://${{ secrets.S3_BUCKET_NAME }}/
      # Deploy 설정
    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws deploy create-deployment \
        --application-name flashfrenzy \
        --deployment-group-name flashfrenzy-deployment-group \
        --deployment-config-name CodeDeployDefault.AllAtOnce \
        # --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},key=flashfrenzy.zip,bundleType=zip \
        --region ap-northeast-2

#  deploy:
#    runs-on: ubuntu-latest
#    needs: build
#
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up JDK 17
#      uses: actions/setup-java@v3
#      with:
#        java-version: '17'
#        distribution: 'temurin'
#
#
#    - name: Deploy
#      uses: appleboy/ssh-action@master
#      with:
#        host: ${{ secrets.EC2_HOST }} # EC2 인스턴스 퍼블릭 DNS
#        username: ubuntu
#        key: ${{ secrets.SSH_PRIVATE_KEY }} # pem 키
#        # 도커 작업
#        script: |
#          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/ff:latest
#          sudo docker stop $(sudo docker ps -a -q)
#          sudo docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/ff:latest
#          sudo docker rm $(sudo docker ps --filter 'status=exited' -a -q)
#          sudo docker image prune -a -f
